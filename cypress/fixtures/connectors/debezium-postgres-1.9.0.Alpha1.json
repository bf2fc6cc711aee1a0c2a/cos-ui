{
    "connector_type": {
        "id": "debezium-postgres-1.9.0.Alpha1",
        "kind": "ConnectorType",
        "href": "/api/connector_mgmt/v1/kafka_connector_types/debezium-postgres-1.9.0.Alpha1",
        "name": "Debezium PostgreSQL Connector",
        "version": "1.9.0.Alpha1",
        "channels": [
            "stable"
        ],
        "icon_href": "http://example.com/images/debezium-postgres-1.9.0.Alpha1.png",
        "labels": [
            "source",
            "debezium",
            "postgres",
            "1.9.0.Alpha1"
        ],
        "schema": {
            "$defs": {
                "serializer": {
                    "default": "JSON",
                    "enum": [
                        "JSON",
                        "AVRO",
                        "JSON_WITHOUT_SCHEMA"
                    ],
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "data_shape": {
                "additionalProperties": false,
                "properties": {
                    "key": {
                        "$ref": "#/$defs/serializer"
                    },
                    "value": {
                        "$ref": "#/$defs/serializer"
                    }
                },
                "type": "object"
            },
            "properties": {
                "binary.handling.mode": {
                    "default": "bytes",
                    "description": "Specify how binary (blob, binary, etc.) columns should be represented in change events, including:'bytes' represents binary data as byte array (default)'base64' represents binary data as base64-encoded string'hex' represents binary data as hex-encoded (base16) string",
                    "enum": [
                        "bytes",
                        "base64",
                        "hex"
                    ],
                    "title": "Binary Handling",
                    "type": "string",
                    "x-category": "CONNECTOR",
                    "x-name": "binary.handling.mode"
                },
                "column.exclude.list": {
                    "description": "Regular expressions matching columns to exclude from change events",
                    "format": "list,regex",
                    "title": "Exclude Columns",
                    "type": "string",
                    "x-category": "FILTERS",
                    "x-name": "column.exclude.list"
                },
                "column.include.list": {
                    "description": "Regular expressions matching columns to include in change events",
                    "format": "list,regex",
                    "title": "Include Columns",
                    "type": "string",
                    "x-category": "FILTERS",
                    "x-name": "column.include.list"
                },
                "column.mask.hash.([^.]+).with.salt.(.+)": {
                    "description": "A comma-separated list of regular expressions matching fully-qualified names of columns that should be masked by hashing the input. Using the specified hash algorithms and salt.",
                    "title": "Mask Columns Using Hash and Salt",
                    "type": "string",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "column.mask.hash.([^.]+).with.salt.(.+)"
                },
                "column.mask.with.(d+).chars": {
                    "description": "A comma-separated list of regular expressions matching fully-qualified names of columns that should be masked with configured amount of asterisk ('*') characters.",
                    "title": "Mask Columns With n Asterisks",
                    "type": "string",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "column.mask.with.(d+).chars"
                },
                "column.propagate.source.type": {
                    "description": "A comma-separated list of regular expressions matching fully-qualified names of columns that  adds the columnâ€™s original type and original length as parameters to the corresponding field schemas in the emitted change records.",
                    "format": "list,regex",
                    "title": "Propagate Source Types by Columns",
                    "type": "string",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "column.propagate.source.type"
                },
                "column.truncate.to.(d+).chars": {
                    "description": "A comma-separated list of regular expressions matching fully-qualified names of columns that should be truncated to the configured amount of characters.",
                    "format": "int32",
                    "title": "Truncate Columns To n Characters",
                    "type": "integer",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "column.truncate.to.(d+).chars"
                },
                "converters": {
                    "description": "Optional list of custom converters that would be used instead of default ones. The converters are defined using '\u003cconverter.prefix\u003e.type' config option and configured using options '\u003cconverter.prefix\u003e.\u003coption\u003e'",
                    "title": "List of prefixes defining custom values converters.",
                    "type": "string",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "converters"
                },
                "database.dbname": {
                    "description": "The name of the database from which the connector should capture changes",
                    "nullable": false,
                    "title": "Database",
                    "type": "string",
                    "x-category": "CONNECTION",
                    "x-name": "database.dbname"
                },
                "database.hostname": {
                    "description": "Resolvable hostname or IP address of the database server.",
                    "nullable": false,
                    "title": "Hostname",
                    "type": "string",
                    "x-category": "CONNECTION",
                    "x-name": "database.hostname"
                },
                "database.initial.statements": {
                    "description": "A semicolon separated list of SQL statements to be executed when a JDBC connection to the database is established. Note that the connector may establish JDBC connections at its own discretion, so this should typically be used for configurationof session parameters only, but not for executing DML statements. Use doubled semicolon (';;') to use a semicolon as a character and not as a delimiter.",
                    "title": "Initial statements",
                    "type": "string",
                    "x-category": "CONNECTION_ADVANCED",
                    "x-name": "database.initial.statements"
                },
                "database.password": {
                    "description": "Password of the database user to be used when connecting to the database.",
                    "oneOf": [
                        {
                            "description": "Password of the database user to be used when connecting to the database.",
                            "format": "password",
                            "type": "string"
                        },
                        {
                            "additionalProperties": true,
                            "description": "An opaque reference to the password.",
                            "properties": {},
                            "type": "object"
                        }
                    ],
                    "title": "Password",
                    "x-category": "CONNECTION",
                    "x-name": "database.password"
                },
                "database.port": {
                    "default": 5432,
                    "description": "Port of the database server.",
                    "format": "int32",
                    "title": "Port",
                    "type": "integer",
                    "x-category": "CONNECTION",
                    "x-name": "database.port"
                },
                "database.server.name": {
                    "description": "Unique name that identifies the database server and all recorded offsets, and that is used as a prefix for all schemas and topics. Each distinct installation should have a separate namespace and be monitored by at most one Debezium connector.",
                    "nullable": false,
                    "title": "Namespace",
                    "type": "string",
                    "x-category": "CONNECTION",
                    "x-name": "database.server.name"
                },
                "database.sslcert": {
                    "description": "File containing the SSL Certificate for the client. See the Postgres SSL docs for further information",
                    "title": "SSL Client Certificate",
                    "type": "string",
                    "x-category": "CONNECTION_ADVANCED_SSL",
                    "x-name": "database.sslcert"
                },
                "database.sslfactory": {
                    "description": "A name of class to that creates SSL Sockets. Use org.postgresql.ssl.NonValidatingFactory to disable SSL validation in development environments",
                    "title": "SSL Root Certificate",
                    "type": "string",
                    "x-category": "CONNECTION_ADVANCED_SSL",
                    "x-name": "database.sslfactory"
                },
                "database.sslkey": {
                    "description": "File containing the SSL private key for the client. See the Postgres SSL docs for further information",
                    "title": "SSL Client Key",
                    "type": "string",
                    "x-category": "CONNECTION_ADVANCED_SSL",
                    "x-name": "database.sslkey"
                },
                "database.sslmode": {
                    "default": "disable",
                    "description": "Whether to use an encrypted connection to Postgres. Options include'disable' (the default) to use an unencrypted connection; 'require' to use a secure (encrypted) connection, and fail if one cannot be established; 'verify-ca' like 'required' but additionally verify the server TLS certificate against the configured Certificate Authority (CA) certificates, or fail if no valid matching CA certificates are found; or'verify-full' like 'verify-ca' but additionally verify that the server certificate matches the host to which the connection is attempted.",
                    "enum": [
                        "disable",
                        "verify-ca",
                        "require",
                        "verify-full"
                    ],
                    "title": "SSL mode",
                    "type": "string",
                    "x-category": "CONNECTION_ADVANCED_SSL",
                    "x-name": "database.sslmode"
                },
                "database.sslpassword": {
                    "description": "Password to access the client private key from the file specified by 'database.sslkey'. See the Postgres SSL docs for further information",
                    "oneOf": [
                        {
                            "description": "Password of the database user to be used when connecting to the database.",
                            "format": "password",
                            "type": "string"
                        },
                        {
                            "additionalProperties": true,
                            "description": "An opaque reference to the password.",
                            "properties": {},
                            "type": "object"
                        }
                    ],
                    "title": "SSL Client Key Password",
                    "x-category": "CONNECTION_ADVANCED_SSL",
                    "x-name": "database.sslpassword"
                },
                "database.sslrootcert": {
                    "description": "File containing the root certificate(s) against which the server is validated. See the Postgres JDBC SSL docs for further information",
                    "title": "SSL Root Certificate",
                    "type": "string",
                    "x-category": "CONNECTION_ADVANCED_SSL",
                    "x-name": "database.sslrootcert"
                },
                "database.tcpKeepAlive": {
                    "default": true,
                    "description": "Enable or disable TCP keep-alive probe to avoid dropping TCP connection",
                    "title": "TCP keep-alive probe",
                    "type": "boolean",
                    "x-category": "CONNECTION_ADVANCED",
                    "x-name": "database.tcpKeepAlive"
                },
                "database.user": {
                    "description": "Name of the database user to be used when connecting to the database.",
                    "nullable": false,
                    "title": "User",
                    "type": "string",
                    "x-category": "CONNECTION",
                    "x-name": "database.user"
                },
                "datatype.propagate.source.type": {
                    "description": "A comma-separated list of regular expressions matching the database-specific data type names that adds the data type's original type and original length as parameters to the corresponding field schemas in the emitted change records.",
                    "format": "list,regex",
                    "title": "Propagate Source Types by Data Type",
                    "type": "string",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "datatype.propagate.source.type"
                },
                "decimal.handling.mode": {
                    "default": "precise",
                    "description": "Specify how DECIMAL and NUMERIC columns should be represented in change events, including:'precise' (the default) uses java.math.BigDecimal to represent values, which are encoded in the change events using a binary representation and Kafka Connect's 'org.apache.kafka.connect.data.Decimal' type; 'string' uses string to represent values; 'double' represents values using Java's 'double', which may not offer the precision but will be far easier to use in consumers.",
                    "enum": [
                        "string",
                        "double",
                        "precise"
                    ],
                    "title": "Decimal Handling",
                    "type": "string",
                    "x-category": "CONNECTOR",
                    "x-name": "decimal.handling.mode"
                },
                "event.processing.failure.handling.mode": {
                    "default": "fail",
                    "description": "Specify how failures during processing of events (i.e. when encountering a corrupted event) should be handled, including:'fail' (the default) an exception indicating the problematic event and its position is raised, causing the connector to be stopped; 'warn' the problematic event and its position will be logged and the event will be skipped;'ignore' the problematic event will be skipped.",
                    "enum": [
                        "warn",
                        "fail",
                        "ignore",
                        "skip"
                    ],
                    "title": "Event deserialization failure handling",
                    "type": "string",
                    "x-category": "ADVANCED",
                    "x-name": "event.processing.failure.handling.mode"
                },
                "heartbeat.action.query": {
                    "description": "The query executed with every heartbeat.",
                    "title": "An optional query to execute with every heartbeat",
                    "type": "string",
                    "x-category": "ADVANCED_HEARTBEAT",
                    "x-name": "heartbeat.action.query"
                },
                "heartbeat.interval.ms": {
                    "default": 0,
                    "description": "Length of an interval in milli-seconds in in which the connector periodically sends heartbeat messages to a heartbeat topic. Use 0 to disable heartbeat messages. Disabled by default.",
                    "format": "int32",
                    "title": "Connector heartbeat interval (milli-seconds)",
                    "type": "integer",
                    "x-category": "ADVANCED_HEARTBEAT",
                    "x-name": "heartbeat.interval.ms"
                },
                "heartbeat.topics.prefix": {
                    "default": "__debezium-heartbeat",
                    "description": "The prefix that is used to name heartbeat topics.Defaults to __debezium-heartbeat.",
                    "title": "A prefix used for naming of heartbeat topics",
                    "type": "string",
                    "x-category": "ADVANCED_HEARTBEAT",
                    "x-name": "heartbeat.topics.prefix"
                },
                "hstore.handling.mode": {
                    "default": "json",
                    "description": "Specify how HSTORE columns should be represented in change events, including:'json' represents values as string-ified JSON (default)'map' represents values as a key/value map",
                    "enum": [
                        "json",
                        "map"
                    ],
                    "title": "HStore Handling",
                    "type": "string",
                    "x-category": "CONNECTOR",
                    "x-name": "hstore.handling.mode"
                },
                "include.schema.comments": {
                    "default": false,
                    "description": "Whether the connector parse table and column's comment to metadata object.Note: Enable this option will bring the implications on memory usage. The number and size of ColumnImpl objects is what largely impacts how much memory is consumed by the Debezium connectors, and adding a String to each of them can potentially be quite heavy. The default is 'false'.",
                    "title": "Include Table and Column Comments",
                    "type": "boolean",
                    "x-category": "CONNECTOR",
                    "x-name": "include.schema.comments"
                },
                "include.unknown.datatypes": {
                    "default": false,
                    "description": "Specify whether the fields of data type not supported by Debezium should be processed:'false' (the default) omits the fields; 'true' converts the field into an implementation dependent binary representation.",
                    "title": "Include unknown datatypes",
                    "type": "boolean",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "include.unknown.datatypes"
                },
                "incremental.snapshot.chunk.size": {
                    "default": 1024,
                    "description": "The maximum size of chunk for incremental snapshotting",
                    "format": "int32",
                    "title": "Incremental snapshot chunk size",
                    "type": "integer",
                    "x-category": "ADVANCED",
                    "x-name": "incremental.snapshot.chunk.size"
                },
                "interval.handling.mode": {
                    "default": "numeric",
                    "description": "Specify how INTERVAL columns should be represented in change events, including:'string' represents values as an exact ISO formatted string'numeric' (default) represents values using the inexact conversion into microseconds",
                    "enum": [
                        "string",
                        "numeric"
                    ],
                    "title": "Interval Handling",
                    "type": "string",
                    "x-category": "CONNECTOR",
                    "x-name": "interval.handling.mode"
                },
                "max.batch.size": {
                    "default": 2048,
                    "description": "Maximum size of each batch of source records. Defaults to 2048.",
                    "format": "int32",
                    "title": "Change event batch size",
                    "type": "integer",
                    "x-category": "ADVANCED",
                    "x-name": "max.batch.size"
                },
                "max.queue.size": {
                    "default": 8192,
                    "description": "Maximum size of the queue for change events read from the database log but not yet recorded or forwarded. Defaults to 8192, and should always be larger than the maximum batch size.",
                    "format": "int32",
                    "title": "Change event buffer size",
                    "type": "integer",
                    "x-category": "ADVANCED",
                    "x-name": "max.queue.size"
                },
                "max.queue.size.in.bytes": {
                    "default": 0,
                    "description": "Maximum size of the queue in bytes for change events read from the database log but not yet recorded or forwarded. Defaults to 0. Mean the feature is not enabled",
                    "format": "int64",
                    "title": "Change event buffer size in bytes",
                    "type": "integer",
                    "x-category": "ADVANCED",
                    "x-name": "max.queue.size.in.bytes"
                },
                "message.key.columns": {
                    "description": "A semicolon-separated list of expressions that match fully-qualified tables and column(s) to be used as message key. Each expression must match the pattern '\u003cfully-qualified table name\u003e:\u003ckey columns\u003e',where the table names could be defined as (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on the specific connector,and the key columns are a comma-separated list of columns representing the custom key. For any table without an explicit key configuration the table's primary key column(s) will be used as message key.Example: dbserver1.inventory.orderlines:orderId,orderLineId;dbserver1.inventory.orders:id",
                    "title": "Columns PK mapping",
                    "type": "string",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "message.key.columns"
                },
                "message.prefix.exclude.list": {
                    "description": "A comma-separated list of regular expressions that match the logical decoding message prefixes to be excluded from monitoring.",
                    "format": "list,regex",
                    "title": "Exclude Logical Decoding Message Prefixes",
                    "type": "string",
                    "x-category": "CONNECTOR",
                    "x-name": "message.prefix.exclude.list"
                },
                "message.prefix.include.list": {
                    "description": "A comma-separated list of regular expressions that match the logical decoding message prefixes to be monitored. All prefixes are monitored by default.",
                    "format": "list,regex",
                    "title": "Include Logical Decoding Message Prefixes",
                    "type": "string",
                    "x-category": "CONNECTOR",
                    "x-name": "message.prefix.include.list"
                },
                "plugin.name": {
                    "default": "decoderbufs",
                    "description": "The name of the Postgres logical decoding plugin installed on the server. Supported values are 'decoderbufs' and 'pgoutput'. Defaults to 'decoderbufs'.",
                    "enum": [
                        "decoderbufs",
                        "wal2json_streaming",
                        "wal2json_rds",
                        "pgoutput",
                        "wal2json",
                        "wal2json_rds_streaming"
                    ],
                    "title": "Plugin",
                    "type": "string",
                    "x-category": "CONNECTION_ADVANCED_REPLICATION",
                    "x-name": "plugin.name"
                },
                "poll.interval.ms": {
                    "default": 500,
                    "description": "Time to wait for new change events to appear after receiving no events, given in milliseconds. Defaults to 500 ms.",
                    "format": "int64",
                    "title": "Poll interval (ms)",
                    "type": "integer",
                    "x-category": "ADVANCED",
                    "x-name": "poll.interval.ms"
                },
                "provide.transaction.metadata": {
                    "default": false,
                    "description": "Enables transaction metadata extraction together with event counting",
                    "title": "Store transaction metadata information in a dedicated topic.",
                    "type": "boolean",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "provide.transaction.metadata"
                },
                "publication.autocreate.mode": {
                    "default": "all_tables",
                    "description": "Applies only when streaming changes using pgoutput.Determine how creation of a publication should work, the default is all_tables.DISABLED - The connector will not attempt to create a publication at all. The expectation is that the user has created the publication up-front. If the publication isn't found to exist upon startup, the connector will throw an exception and stop.ALL_TABLES - If no publication exists, the connector will create a new publication for all tables. Note this requires that the configured user has access. If the publication already exists, it will be used. i.e CREATE PUBLICATION \u003cpublication_name\u003e FOR ALL TABLES;FILTERED - If no publication exists, the connector will create a new publication for all those tables matchingthe current filter configuration (see table/database include/exclude list properties). If the publication already exists, it will be used. i.e CREATE PUBLICATION \u003cpublication_name\u003e FOR TABLE \u003ctbl1, tbl2, etc\u003e",
                    "enum": [
                        "filtered",
                        "disabled",
                        "all_tables"
                    ],
                    "title": "Publication Auto Create Mode",
                    "type": "string",
                    "x-category": "CONNECTION_ADVANCED_REPLICATION",
                    "x-name": "publication.autocreate.mode"
                },
                "publication.name": {
                    "default": "dbz_publication",
                    "description": "The name of the Postgres 10+ publication used for streaming changes from a plugin.Defaults to 'dbz_publication'",
                    "title": "Publication",
                    "type": "string",
                    "x-category": "CONNECTION_ADVANCED_REPLICATION",
                    "x-name": "publication.name"
                },
                "query.fetch.size": {
                    "default": 0,
                    "description": "The maximum number of records that should be loaded into memory while streaming.  A value of `0` uses the default JDBC fetch size.",
                    "format": "int32",
                    "title": "Query fetch size",
                    "type": "integer",
                    "x-category": "ADVANCED",
                    "x-name": "query.fetch.size"
                },
                "retriable.restart.connector.wait.ms": {
                    "default": 10000,
                    "description": "Time to wait before restarting connector after retriable exception occurs. Defaults to 10000ms.",
                    "format": "int64",
                    "title": "Retriable restart wait (ms)",
                    "type": "integer",
                    "x-category": "ADVANCED",
                    "x-name": "retriable.restart.connector.wait.ms"
                },
                "sanitize.field.names": {
                    "default": false,
                    "description": "Whether field names will be sanitized to Avro naming conventions",
                    "title": "Sanitize field names to adhere to Avro naming conventions",
                    "type": "boolean",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "sanitize.field.names"
                },
                "schema.exclude.list": {
                    "description": "The schemas for which events must not be captured",
                    "format": "list,regex",
                    "title": "Exclude Schemas",
                    "type": "string",
                    "x-category": "FILTERS",
                    "x-name": "schema.exclude.list"
                },
                "schema.include.list": {
                    "description": "The schemas for which events should be captured",
                    "format": "list,regex",
                    "title": "Include Schemas",
                    "type": "string",
                    "x-category": "FILTERS",
                    "x-name": "schema.include.list"
                },
                "schema.refresh.mode": {
                    "default": "columns_diff",
                    "description": "Specify the conditions that trigger a refresh of the in-memory schema for a table. 'columns_diff' (the default) is the safest mode, ensuring the in-memory schema stays in-sync with the database table's schema at all times. 'columns_diff_exclude_unchanged_toast' instructs the connector to refresh the in-memory schema cache if there is a discrepancy between it and the schema derived from the incoming message, unless unchanged TOASTable data fully accounts for the discrepancy. This setting can improve connector performance significantly if there are frequently-updated tables that have TOASTed data that are rarely part of these updates. However, it is possible for the in-memory schema to become outdated if TOASTable columns are dropped from the table.",
                    "enum": [
                        "columns_diff",
                        "columns_diff_exclude_unchanged_toast"
                    ],
                    "title": "Schema refresh mode",
                    "type": "string",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "schema.refresh.mode"
                },
                "signal.data.collection": {
                    "description": "The name of the data collection that is used to send signals/commands to Debezium. Signaling is disabled when not set.",
                    "title": "Signaling data collection",
                    "type": "string",
                    "x-category": "ADVANCED",
                    "x-name": "signal.data.collection"
                },
                "skipped.operations": {
                    "default": "t",
                    "description": "The comma-separated list of operations to skip during streaming, defined as: 'c' for inserts/create; 'u' for updates; 'd' for deletes, 't' for truncates, and 'none' to indicate nothing skipped. By default, no operations will be skipped.",
                    "format": "list,regex",
                    "title": "skipped Operations",
                    "type": "string",
                    "x-category": "ADVANCED",
                    "x-name": "skipped.operations"
                },
                "slot.drop.on.stop": {
                    "default": false,
                    "description": "Whether or not to drop the logical replication slot when the connector finishes orderlyBy default the replication is kept so that on restart progress can resume from the last recorded location",
                    "title": "Drop slot on stop",
                    "type": "boolean",
                    "x-category": "CONNECTION_ADVANCED_REPLICATION",
                    "x-name": "slot.drop.on.stop"
                },
                "slot.max.retries": {
                    "default": 6,
                    "description": "How many times to retry connecting to a replication slot when an attempt fails.",
                    "format": "int32",
                    "title": "Retry count",
                    "type": "integer",
                    "x-category": "CONNECTION_ADVANCED_REPLICATION",
                    "x-name": "slot.max.retries"
                },
                "slot.name": {
                    "default": "debezium",
                    "description": "The name of the Postgres logical decoding slot created for streaming changes from a plugin.Defaults to 'debezium",
                    "title": "Slot",
                    "type": "string",
                    "x-category": "CONNECTION_ADVANCED_REPLICATION",
                    "x-name": "slot.name"
                },
                "slot.retry.delay.ms": {
                    "default": 10000,
                    "description": "Time to wait between retry attempts when the connector fails to connect to a replication slot, given in milliseconds. Defaults to 10 seconds (10,000 ms).",
                    "format": "int64",
                    "title": "Retry delay",
                    "type": "integer",
                    "x-category": "CONNECTION_ADVANCED_REPLICATION",
                    "x-name": "slot.retry.delay.ms"
                },
                "slot.stream.params": {
                    "description": "Any optional parameters used by logical decoding plugin. Semi-colon separated. E.g. 'add-tables=public.table,public.table2;include-lsn=true'",
                    "title": "Optional parameters to pass to the logical decoder when the stream is started.",
                    "type": "string",
                    "x-category": "CONNECTION_ADVANCED_REPLICATION",
                    "x-name": "slot.stream.params"
                },
                "snapshot.custom.class": {
                    "description": "When 'snapshot.mode' is set as custom, this setting must be set to specify a fully qualified class name to load (via the default class loader).This class must implement the 'Snapshotter' interface and is called on each app boot to determine whether to do a snapshot and how to build queries.",
                    "title": "Snapshot Mode Custom Class",
                    "type": "string",
                    "x-category": "CONNECTOR_SNAPSHOT",
                    "x-name": "snapshot.custom.class"
                },
                "snapshot.delay.ms": {
                    "default": 0,
                    "description": "A delay period before a snapshot will begin, given in milliseconds. Defaults to 0 ms.",
                    "format": "int64",
                    "title": "Snapshot Delay (milliseconds)",
                    "type": "integer",
                    "x-category": "CONNECTOR_SNAPSHOT",
                    "x-name": "snapshot.delay.ms"
                },
                "snapshot.fetch.size": {
                    "description": "The maximum number of records that should be loaded into memory while performing a snapshot",
                    "format": "int32",
                    "title": "Snapshot fetch size",
                    "type": "integer",
                    "x-category": "CONNECTOR_SNAPSHOT",
                    "x-name": "snapshot.fetch.size"
                },
                "snapshot.include.collection.list": {
                    "description": "this setting must be set to specify a list of tables/collections whose snapshot must be taken on creating or restarting the connector.",
                    "format": "list,regex",
                    "title": "Snapshot mode include data collection",
                    "type": "string",
                    "x-category": "CONNECTOR_SNAPSHOT",
                    "x-name": "snapshot.include.collection.list"
                },
                "snapshot.lock.timeout.ms": {
                    "default": 10000,
                    "description": "The maximum number of millis to wait for table locks at the beginning of a snapshot. If locks cannot be acquired in this time frame, the snapshot will be aborted. Defaults to 10 seconds",
                    "format": "int64",
                    "title": "Snapshot lock timeout (ms)",
                    "type": "integer",
                    "x-category": "CONNECTOR_SNAPSHOT",
                    "x-name": "snapshot.lock.timeout.ms"
                },
                "snapshot.max.threads": {
                    "default": 1,
                    "description": "The maximum number of threads used to perform the snapshot.  Defaults to 1.",
                    "format": "int32",
                    "title": "Snapshot maximum threads",
                    "type": "integer",
                    "x-category": "CONNECTOR_SNAPSHOT",
                    "x-name": "snapshot.max.threads"
                },
                "snapshot.mode": {
                    "default": "initial",
                    "description": "The criteria for running a snapshot upon startup of the connector. Options include: 'always' to specify that the connector run a snapshot each time it starts up; 'initial' (the default) to specify the connector can run a snapshot only when no offsets are available for the logical server name; 'initial_only' same as 'initial' except the connector should stop after completing the snapshot and before it would normally start emitting changes;'never' to specify the connector should never run a snapshot and that upon first startup the connector should read from the last position (LSN) recorded by the server; and'exported' deprecated, use 'initial' instead; 'custom' to specify a custom class with 'snapshot.custom_class' which will be loaded and used to determine the snapshot, see docs for more details.",
                    "enum": [
                        "always",
                        "exported",
                        "never",
                        "initial_only",
                        "initial",
                        "custom"
                    ],
                    "title": "Snapshot mode",
                    "type": "string",
                    "x-category": "CONNECTOR_SNAPSHOT",
                    "x-name": "snapshot.mode"
                },
                "snapshot.select.statement.overrides": {
                    "description": " This property contains a comma-separated list of fully-qualified tables (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on thespecific connectors. Select statements for the individual tables are specified in further configuration properties, one for each table, identified by the id 'snapshot.select.statement.overrides.[DB_NAME].[TABLE_NAME]' or 'snapshot.select.statement.overrides.[SCHEMA_NAME].[TABLE_NAME]', respectively. The value of those properties is the select statement to use when retrieving data from the specific table during snapshotting. A possible use case for large append-only tables is setting a specific point where to start (resume) snapshotting, in case a previous snapshotting was interrupted.",
                    "title": "List of tables where the default select statement used during snapshotting should be overridden.",
                    "type": "string",
                    "x-category": "CONNECTOR_SNAPSHOT",
                    "x-name": "snapshot.select.statement.overrides"
                },
                "source.struct.version": {
                    "default": "v2",
                    "description": "A version of the format of the publicly visible source part in the message",
                    "enum": [
                        "v1",
                        "v2"
                    ],
                    "title": "Source struct maker version",
                    "type": "string",
                    "x-category": "ADVANCED",
                    "x-name": "source.struct.version"
                },
                "status.update.interval.ms": {
                    "default": 10000,
                    "description": "Frequency for sending replication connection status updates to the server, given in milliseconds. Defaults to 10 seconds (10,000 ms).",
                    "format": "int32",
                    "title": "Status update interval (ms)",
                    "type": "integer",
                    "x-category": "CONNECTION_ADVANCED_REPLICATION",
                    "x-name": "status.update.interval.ms"
                },
                "table.exclude.list": {
                    "description": "A comma-separated list of regular expressions that match the fully-qualified names of tables to be excluded from monitoring",
                    "format": "list,regex",
                    "title": "Exclude Tables",
                    "type": "string",
                    "x-category": "FILTERS",
                    "x-name": "table.exclude.list"
                },
                "table.ignore.builtin": {
                    "default": true,
                    "description": "Flag specifying whether built-in tables should be ignored.",
                    "title": "Ignore system databases",
                    "type": "boolean",
                    "x-category": "FILTERS",
                    "x-name": "table.ignore.builtin"
                },
                "table.include.list": {
                    "description": "The tables for which changes are to be captured",
                    "format": "list,regex",
                    "title": "Include Tables",
                    "type": "string",
                    "x-category": "FILTERS",
                    "x-name": "table.include.list"
                },
                "time.precision.mode": {
                    "default": "adaptive",
                    "description": "Time, date, and timestamps can be represented with different kinds of precisions, including:'adaptive' (the default) bases the precision of time, date, and timestamp values on the database column's precision; 'adaptive_time_microseconds' like 'adaptive' mode, but TIME fields always use microseconds precision;'connect' always represents time, date, and timestamp values using Kafka Connect's built-in representations for Time, Date, and Timestamp, which uses millisecond precision regardless of the database columns' precision .",
                    "enum": [
                        "adaptive",
                        "adaptive_time_microseconds",
                        "connect"
                    ],
                    "title": "Time Precision",
                    "type": "string",
                    "x-category": "CONNECTOR",
                    "x-name": "time.precision.mode"
                },
                "toasted.value.placeholder": {
                    "default": "__debezium_unavailable_value",
                    "description": "Specify the constant that will be provided by Debezium to indicate that the original value is a toasted value not provided by the database. If starts with 'hex:' prefix it is expected that the rest of the string represents hexadecimal encoded octets.Deprecated, use 'unavailable.value.placeholder' instead.",
                    "title": "Toasted value placeholder",
                    "type": "string",
                    "x-category": "CONNECTOR_ADVANCED",
                    "x-name": "toasted.value.placeholder"
                },
                "tombstones.on.delete": {
                    "default": true,
                    "description": "Whether delete operations should be represented by a delete event and a subsquenttombstone event (true) or only by a delete event (false). Emitting the tombstone event (the default behavior) allows Kafka to completely delete all events pertaining to the given key once the source record got deleted.",
                    "title": "Change the behaviour of Debezium with regards to delete operations",
                    "type": "boolean",
                    "x-category": "CONNECTOR",
                    "x-name": "tombstones.on.delete"
                },
                "transaction.topic": {
                    "default": "${database.server.name}.transaction",
                    "description": "The name of the transaction metadata topic. The placeholder ${database.server.name} can be used for referring to the connector's logical name; defaults to ${database.server.name}.transaction.",
                    "title": "Transaction topic name",
                    "type": "string",
                    "x-category": "ADVANCED",
                    "x-name": "transaction.topic"
                },
                "truncate.handling.mode": {
                    "default": "skip",
                    "description": "(Deprecated) Specify how TRUNCATE operations are handled for change events (supported only on pg11+ pgoutput plugin), including: 'skip' to skip / ignore TRUNCATE events (default), 'include' to handle and include TRUNCATE events. Use 'skipped.operations' instead.",
                    "enum": [
                        "include",
                        "skip"
                    ],
                    "title": "Truncate handling mode",
                    "type": "string",
                    "x-category": "CONNECTOR",
                    "x-name": "truncate.handling.mode"
                },
                "xmin.fetch.interval.ms": {
                    "default": 0,
                    "description": "Specify how often (in ms) the xmin will be fetched from the replication slot. This xmin value is exposed by the slot which gives a lower bound of where a new replication slot could start from. The lower the value, the more likely this value is to be the current 'true' value, but the bigger the performance cost. The bigger the value, the less likely this value is to be the current 'true' value, but the lower the performance penalty. The default is set to 0 ms, which disables tracking xmin.",
                    "format": "int64",
                    "title": "Xmin fetch interval (ms)",
                    "type": "integer",
                    "x-category": "CONNECTION_ADVANCED_REPLICATION",
                    "x-name": "xmin.fetch.interval.ms"
                }
            },
            "required": [
                "database.server.name",
                "database.hostname",
                "database.user",
                "database.dbname"
            ],
            "title": "Debezium PostgreSQL Connector",
            "type": "object",
            "x-className": "io.debezium.connector.postgresql.PostgresConnector",
            "x-connector-id": "postgres",
            "x-version": "1.9.0.Alpha1"
        }
    }
}