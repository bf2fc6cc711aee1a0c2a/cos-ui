openapi: 3.0.3
info:
  title: Kafka Service Fleet Manager
  version: 0.0.1
  description: >-
    Kafka Service Fleet Manager is a Rest API to manage kafka instances and
    connectors.
servers:
  - url: 'https://api.openshift.com'
    description: Main (production) server
  - url: 'https://api.stage.openshift.com'
    description: Staging server
  - url: 'http://localhost:8000'
    description: localhost
  - url: /
    description: current domain
tags:
  - name: Connector Types
    description: ''
  - name: Connectors
    description: ''
  - name: Connector Clusters
    description: ''
  - name: Connector Clusters Agent
    description: only accessible by connector fleet shard agents
  - name: Agent Clusters
    description: ''
paths:
  /api/managed-services-api/v1:
    get:
      operationId: versionMetadata
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionMetadata'
          description: Version metadata
      summary: Retrieves the version metadata
  /api/managed-services-api/v1/status:
    get:
      operationId: serviceStatus
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
          description: Ok
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      summary: >-
        Retrieves the status of resources e.g whether we have reached maximum
        service capacity
      security:
        - Bearer: []
  '/api/managed-services-api/v1/kafkas/{id}':
    get:
      operationId: getKafkaById
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRequest'
              examples:
                KafkaRequestGetResponseExample:
                  $ref: '#/components/examples/KafkaRequestExample'
                KafkaRequestGetResponseWithFailedCreationStatusExample:
                  $ref: >-
                    #/components/examples/KafkaRequestFailedCreationStatusExample
          description: Kafka request found by id
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No kafka request with specified id exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      summary: Get a kafka request by id
    delete:
      operationId: deleteKafkaById
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: null
          description: Deleted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400DeletionExample:
                  $ref: '#/components/examples/400DeletionExample'
          description: Validation errors occurred
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404DeleteExample:
                  $ref: '#/components/examples/404DeleteExample'
          description: No kafka request with specified id exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500DeleteExample:
                  $ref: '#/components/examples/500DeleteExample'
          description: Unexpected error occurred
      summary: Delete a kafka request by id
      security:
        - Bearer: []
    parameters:
      - $ref: '#/components/parameters/id'
  /api/managed-services-api/v1/kafkas:
    post:
      operationId: createKafka
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      requestBody:
        description: Kafka data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaRequestPayload'
            examples:
              USRegion:
                $ref: '#/components/examples/USRegionExample'
              EURegion:
                $ref: '#/components/examples/EURegionExample'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRequest'
              examples:
                KafkaRequestPostResponseExample:
                  $ref: '#/components/examples/KafkaRequestExample'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400CreationExample:
                  $ref: '#/components/examples/400CreationExample'
          description: Validation errors occurred
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
                403MaxAllowedInstanceReachedExample:
                  $ref: '#/components/examples/403MaxAllowedInstanceReachedExample'
          description: >-
            User forbidden either because the user is not authorized to access
            the service or because the maximum number of instances that can be
            created by this user has been reached.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: The requested resource doesn't exist
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                409NameConflictExample:
                  $ref: '#/components/examples/409NameConflictExample'
          description: A conflict has been detected in the creation of this resource
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: An unexpected error occurred creating the Kafka Request
      security:
        - Bearer: []
      summary: Create a new kafka Request
    get:
      summary: Returns a list of Kafka requests
      operationId: listKafkas
      security:
        - Bearer: []
      responses:
        '200':
          description: A list of Kafka requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRequestList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                InvalidQueryExample:
                  $ref: '#/components/examples/400InvalidQueryExample'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service.
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/search'
  /api/managed-services-api/v1/cloud_providers:
    get:
      summary: Retrieves the list of supported cloud providers.
      operationId: listCloudProviders
      security:
        - Bearer: []
      responses:
        '200':
          description: Retrieved list of supported cloud providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudProviderList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
  '/api/managed-services-api/v1/cloud_providers/{id}/regions':
    get:
      summary: Retrieves the list of supported regions of the supported cloud provider.
      operationId: listCloudProviderRegions
      security:
        - Bearer: []
      responses:
        '200':
          description: Retrieved list of supported cloud providers regions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudRegionList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
  /api/managed-services-api/v1/serviceaccounts:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountList'
          description: List of service accounts
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: listServiceAccounts
      summary: List service accounts
    post:
      requestBody:
        description: service account request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccountRequest'
            examples:
              sa:
                $ref: '#/components/examples/ServiceAccountRequestExample'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccount'
              examples:
                serviceaccount:
                  $ref: '#/components/examples/ServiceAccountExample'
          description: service account created
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: list of service account
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: createServiceAccount
      summary: Create a service account
  '/api/managed-services-api/v1/serviceaccounts/{id}':
    get:
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccount'
              examples:
                sa:
                  $ref: '#/components/examples/ServiceAccountByIdExample'
          description: get service account by id
      security:
        - Bearer: []
      operationId: getServiceAccountById
      summary: get service account by id
    summary: Get service account by id
    description: Get the service account with the given id
    delete:
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service
        '500':
          content:
            application/json:
              schema: {}
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: deleteServiceAccount
      summary: Delete service account
  '/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials':
    post:
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccount'
              examples:
                sa-reset:
                  $ref: '#/components/examples/ServiceAccountExample'
          description: reset credentials
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service
        '500':
          content:
            application/json:
              schema: {}
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: resetServiceAccountCreds
      summary: reset credentials for the service account
  '/api/managed-services-api/v1/kafkas/{id}/metrics/query_range':
    get:
      summary: Get metrics with timeseries range query by kafka id.
      operationId: GetMetricsByRangeQuery
      security:
        - Bearer: []
      responses:
        '200':
          description: A JSON array of prometheus metrics objects from observatorium
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsRangeQueryList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/duration'
        - $ref: '#/components/parameters/interval'
        - $ref: '#/components/parameters/filters'
  '/api/managed-services-api/v1/kafkas/{id}/metrics/query':
    get:
      summary: Get metrics with instant query by kafka id.
      operationId: GetMetricsByInstantQuery
      security:
        - Bearer: []
      responses:
        '200':
          description: A JSON array of prometheus metrics objects from observatorium
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsInstantQueryList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/filters'
  '/api/managed-services-api/v1/kafka-connector-types/{connector_type_id}':
    parameters:
      - name: connector_type_id
        description: The id of the connector type
        schema:
          type: string
        in: path
        required: true
    get:
      tags:
        - Connector Types
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorType'
          description: The connector type matching the request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: getConnectorTypeByID
      summary: Get a connector type by name and version
  /api/managed-services-api/v1/kafka-connector-types:
    get:
      tags:
        - Connector Types
      security:
        - Bearer: []
      operationId: listConnectorTypes
      summary: Returns a list of connector types
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorTypeList'
          description: A list of connector types
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
  /api/managed-services-api/v1/kafka-connectors:
    post:
      tags:
        - Connectors
      operationId: createConnector
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      requestBody:
        description: Connector data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connector'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400CreationExample:
                  $ref: '#/components/examples/400CreationExample'
          description: Validation errors occurred
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: The requested resource doesn't exist
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: An unexpected error occurred creating the connector
      security:
        - Bearer: []
      summary: Create a new connector
    get:
      tags:
        - Connectors
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - in: query
          name: kafka_id
          description: The kafka cluster id
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorList'
          description: A list of connectors
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: listConnectors
      summary: Returns a list of connector types
  '/api/managed-services-api/v1/kafkas-connectors/{connector_id}':
    parameters:
      - in: query
        name: kafka_id
        description: The kafka cluster id
        schema:
          type: string
      - name: connector_id
        description: The id of the connector
        schema:
          type: string
        in: path
        required: true
    get:
      tags:
        - Connectors
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: The connector matching the request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: getConnector
      summary: Get a connector
    delete:
      tags:
        - Connectors
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404DeleteExample:
                  $ref: '#/components/examples/404DeleteExample'
          description: No kafka request with specified id exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500DeleteExample:
                  $ref: '#/components/examples/500DeleteExample'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: deleteConnector
      summary: Delete a connector
    patch:
      tags:
        - Connectors
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: The connector matching the request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: patchConnector
      summary: patch a connector
      requestBody:
        description: Data to patch the connector with
        content:
          application/json-patch+json:
            schema:
              description: 'A JSON Patch, RFC 6902 - https://tools.ietf.org/html/rfc6902'
              type: object
          application/merge-patch+json:
            schema:
              description: >-
                A JSON Merge Patch, RFC 7386 -
                https://tools.ietf.org/html/rfc7386
              type: object
        required: true
  /api/managed-services-api/v1/kafka-connector-clusters:
    post:
      tags:
        - Connector Clusters
      operationId: createConnectorCluster
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      requestBody:
        description: Connector cluster data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorCluster'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCluster'
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400CreationExample:
                  $ref: '#/components/examples/400CreationExample'
          description: Validation errors occurred
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: The requested resource doesn't exist
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: An unexpected error occurred creating the connector cluster
      security:
        - Bearer: []
      summary: Create a new connector cluster
    get:
      tags:
        - Connector Clusters
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorClusterList'
          description: A list of connector clusters
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: listConnectorClusters
      summary: Returns a list of connector clusters
  '/api/managed-services-api/v1/kafka-connector-clusters/{connector_cluster_id}':
    parameters:
      - name: connector_cluster_id
        description: The id of the connector cluster
        schema:
          type: string
        in: path
        required: true
    get:
      tags:
        - Connector Clusters
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCluster'
          description: The connector cluster matching the request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector cluster type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: getConnectorCluster
      summary: Get a connector cluster
    delete:
      tags:
        - Connector Clusters
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404DeleteExample:
                  $ref: '#/components/examples/404DeleteExample'
          description: No resource with specified id exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500DeleteExample:
                  $ref: '#/components/examples/500DeleteExample'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: deleteConnectorCluster
      summary: Delete a connector cluster
  '/api/managed-services-api/v1/kafka-connector-clusters/{connector_cluster_id}/addon-parameters':
    parameters:
      - name: connector_cluster_id
        description: The id of the connector cluster
        schema:
          type: string
        in: path
        required: true
    get:
      tags:
        - Connector Clusters
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddonParameterList'
          description: >-
            The parameters that should be used to configure the managed
            connector addon on the cluster.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No matching connector cluster type exists
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: getConnectorClusterAddonParameters
      summary: Get a connector cluster's addon parameters
  '/api/managed-services-api/v1/kafka-connector-clusters/{connector_cluster_id}/status':
    parameters:
      - name: connector_cluster_id
        description: The id of the connector cluster
        schema:
          type: string
        in: path
        required: true
    put:
      tags:
        - Connector Clusters Agent
      security:
        - Bearer: []
      operationId: updateKafkaConnectorClusterStatus
      summary: Update the status of a connector cluster
      requestBody:
        description: Cluster status update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorClusterStatus'
        required: true
      responses:
        '200':
          description: Cluster status is updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
  '/api/managed-services-api/v1/kafka-connector-clusters/{connector_cluster_id}/deployments':
    parameters:
      - name: connector_cluster_id
        description: The id of the connector cluster
        schema:
          type: string
        in: path
        required: true
    get:
      tags:
        - Connector Clusters Agent
      security:
        - Bearer: []
      operationId: listClusterAsignedConnectorDeployments
      summary: Returns a list of connector deployments assigned to the cluster.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - in: query
          name: gt_version
          description: >-
            filters the connectors to those with a version greater than the
            given value
          schema:
            type: integer
            format: int64
        - in: query
          name: watch
          description: >-
            watch for changes to the resources and return them as a stream of
            watch events. Specify gt_version to specify the starting point.
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorDeploymentList'
            application/json;stream=watch:
              schema:
                $ref: '#/components/schemas/ConnectorDeploymentWatchEvent'
          description: A list of connector
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
  '/api/managed-services-api/v1/kafka-connector-clusters/{connector_cluster_id}/deployments/{deployment_id}':
    parameters:
      - name: connector_cluster_id
        description: The id of the connector cluster
        schema:
          type: string
        in: path
        required: true
      - name: deployment_id
        description: The id of the deployment
        schema:
          type: string
        in: path
        required: true
    get:
      tags:
        - Connector Clusters Agent
      security:
        - Bearer: []
      operationId: getClusterAsignedConnectorDeployments
      summary: Returns a list of connector deployments assigned to the cluster.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorDeployment'
          description: A connector deployment
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
  '/api/managed-services-api/v1/kafka-connector-clusters/{connector_cluster_id}/deployments/{deployment_id}/status':
    parameters:
      - name: connector_cluster_id
        description: The id of the connector cluster
        schema:
          type: string
        in: path
        required: true
      - name: deployment_id
        description: The id of the deployment
        schema:
          type: string
        in: path
        required: true
    put:
      tags:
        - Connector Clusters Agent
      operationId: updateConnectorDeploymentStatus
      summary: update the connector deployment status
      security:
        - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorDeploymentStatus'
        required: true
      responses:
        '200':
          description: Cluster status is updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
  '/api/managed-services-api/v1/agent-clusters/{id}/status':
    put:
      tags:
        - Agent Clusters
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: Cluster status update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataPlaneClusterUpdateStatusRequest'
        required: true
      responses:
        '200':
          description: Cluster status is updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
      security:
        - Bearer: []
      operationId: updateAgentClusterStatus
      summary: Update the status of an agent cluster
  '/api/managed-services-api/v1/agent-clusters/{id}/kafkas/status':
    put:
      tags:
        - Agent Clusters
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: Kafka clusters status update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataPlaneKafkaStatusUpdateRequest'
        required: true
      responses:
        '200':
          description: Status is updated for Kafka clusters
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
      security:
        - Bearer: []
      operationId: updateKafkaClusterStatus
      summary: Update the status of Kafka clusters on an agent cluster
  '/api/managed-services-api/v1/agent-clusters/{id}/kafkas':
    get:
      tags:
        - Agent Clusters
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: The list of the ManagedKafkas for the specified agent cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedKafkaList'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
      security:
        - Bearer: []
      operationId: getKafkas
      summary: Get the list of ManagedaKafkas for the specified agent cluster
  '/api/managed-services-api/v1/agent-clusters/{id}':
    get:
      tags:
        - Agent Clusters
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: The ManagedKafkaAgent CR Spec
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataplaneClusterAgentConfig'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400InvalidIdExample:
                  $ref: '#/components/examples/400InvalidIdExample'
          description: id value is not valid
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: Auth token is not valid.
      security:
        - Bearer: []
      operationId: getKafkaAgent
      summary: Get the spec of the ManagedKafkaAgent CR spec
components:
  schemas:
    ObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
    List:
      required:
        - kind
        - page
        - size
        - total
        - items
      type: object
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
    Error:
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            code:
              type: string
            reason:
              type: string
            operation_id:
              type: string
    ErrorList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Error'
    KafkaRequest:
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            status:
              type: string
            cloud_provider:
              type: string
            multi_az:
              type: boolean
            region:
              type: string
            owner:
              type: string
            name:
              type: string
            bootstrapServerHost:
              type: string
            created_at:
              format: date-time
              type: string
            updated_at:
              format: date-time
              type: string
            failed_reason:
              type: string
            version:
              type: string
          example:
            $ref: '#/components/examples/KafkaRequestExample'
    KafkaRequestList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          example:
            kind: KafkaRequestList
            page: '1'
            size: '1'
            total: '1'
            item:
              $ref: '#/components/examples/KafkaRequestExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/KafkaRequest'
    VersionMetadata:
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          example:
            kind: APIVersion
            id: v1
            href: /api/managed-services-api/v1
            collections:
              - id: kafkas
                href: /api/managed-services-api/v1/kafkas
                kind: KafkaList
          properties:
            collections:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ObjectReference'
    ServiceStatus:
      description: Schema for the service status response body
      example:
        kafkas:
          max_capacity_reached: true
      type: object
      properties:
        kafkas:
          description: The kafka resource api status
          type: object
          required:
            - max_capacity_reached
          properties:
            max_capacity_reached:
              description: Indicates whether we have reached kafka maximum capacity
              type: boolean
    KafkaRequestPayload:
      description: Schema for the request body sent to /kafkas POST
      required:
        - name
      type: object
      properties:
        cloud_provider:
          description: The cloud provider where the Kafka cluster will be created in
          type: string
        multi_az:
          description: Set this to true to configure the Kafka cluster to be multiAZ
          type: boolean
        name:
          description: >-
            The name of the Kafka cluster. It must consist of lower-case
            alphanumeric characters or '-', start with an alphabetic character,
            and end with an alphanumeric character, and can not be longer than
            32 characters.
          type: string
        region:
          description: The region where the Kafka cluster will be created in
          type: string
    CloudProviderList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          example:
            kind: CloudProviderList
            page: '1'
            size: '1'
            total: '1'
            item:
              $ref: '#/components/examples/CloudProviderExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/CloudProvider'
    CloudRegionList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          example:
            kind: CloudRegionList
            page: '1'
            size: '1'
            total: '1'
            item:
              $ref: '#/components/examples/CloudRegionExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/CloudRegion'
    CloudProvider:
      description: Cloud provider.
      properties:
        kind:
          description: Indicates the type of this object. Will be 'CloudProvider' link.
          type: string
        id:
          description: Unique identifier of the object.
          type: string
        display_name:
          description: Name of the cloud provider for display purposes.
          type: string
        name:
          description: 'Human friendly identifier of the cloud provider, for example `aws`.'
          type: string
        enabled:
          description: Whether the cloud provider is enabled for deploying an OSD cluster.
          type: boolean
      required:
        - enabled
    CloudRegion:
      description: Description of a region of a cloud provider.
      properties:
        kind:
          description: Indicates the type of this object. Will be 'CloudRegion'.
          type: string
        id:
          description: Unique identifier of the object.
          type: string
        display_name:
          description: 'Name of the region for display purposes, for example `N. Virginia`.'
          type: string
        enabled:
          description: Whether the region is enabled for deploying an OSD cluster.
          type: boolean
          default: false
      required:
        - enabled
    ServiceAccount:
      description: >-
        Service Account created in MAS-SSO for the Kafka Cluster for
        authentication
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            id:
              description: server generated unique id of the service account
              type: string
            name:
              description: ''
              type: string
            description:
              description: ''
              type: string
            clientID:
              type: string
            clientSecret:
              type: string
            owner:
              type: string
            created_at:
              format: date-time
              type: string
          example:
            $ref: '#/components/examples/ServiceAccountExample'
    ServiceAccountRequest:
      description: Schema for the request to create a service account
      required:
        - name
      type: object
      properties:
        name:
          description: The name of the service account
          type: string
        description:
          description: A description for the service account
          type: string
      example:
        $ref: '#/components/examples/ServiceAccountRequestExample'
    ServiceAccountListItem:
      description: ''
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            id:
              description: server generated unique id of the service account
              type: string
            clientID:
              description: client id of the service account
              type: string
            name:
              description: name of the service account
              type: string
            owner:
              description: owner of the service account
              type: string
            created_at:
              format: date-time
              description: service account creation timestamp
              type: string
            description:
              type: string
              description: description of the service account
    ServiceAccountList:
      allOf:
        - type: object
          example:
            kind: ServiceAccountList
            items:
              - $ref: '#/components/examples/ServiceAccountListItemExample'
          properties:
            kind:
              type: string
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ServiceAccountListItem'
          required:
            - kind
            - items
    MetricsRangeQueryList:
      allOf:
        - type: object
          example:
            kind: MetricsRangeQueryList
            id: 1nbpS70HduPe4l0to8jSg2CLzfu
            items:
              $ref: '#/components/examples/MetricsRangeQueryExample'
          properties:
            kind:
              type: string
            id:
              type: string
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/RangeQuery'
    RangeQuery:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/values'
    values:
      type: object
      properties:
        Timestamp:
          type: integer
          format: int64
        Value:
          type: number
          format: double
      required:
        - Value
    MetricsInstantQueryList:
      allOf:
        - type: object
          example:
            kind: MetricsInstantQueryList
            id: 1nbpS70HduPe4l0to8jSg2CLzfu
            items:
              $ref: '#/components/examples/MetricsInstantQueryExample'
          properties:
            kind:
              type: string
            id:
              type: string
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/InstantQuery'
    InstantQuery:
      type: object
      properties:
        metric:
          type: object
          additionalProperties:
            type: string
        Timestamp:
          type: integer
          format: int64
        Value:
          type: number
          format: double
      required:
        - Value
    ListReference:
      required:
        - kind
        - items
      type: object
      properties:
        kind:
          type: string
    PrivateObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
    MetaV1Condition:
      type: object
      properties:
        type:
          type: string
        reason:
          type: string
        message:
          type: string
        status:
          type: string
        lastTransitionTime:
          type: string
    ManagedKafkaCapacity:
      type: object
      properties:
        ingressEgressThroughputPerSec:
          type: string
        totalMaxConnections:
          type: integer
          format: int
        maxDataRetentionSize:
          type: string
        maxPartitions:
          type: integer
          format: int
        maxDataRetentionPeriod:
          type: string
    ManagedKafkaVersions:
      type: object
      properties:
        kafka:
          type: string
        strimzi:
          type: string
    ManagedKafka:
      allOf:
        - $ref: '#/components/schemas/PrivateObjectReference'
        - type: object
          properties:
            metadata:
              type: object
              properties:
                name:
                  type: string
                namespace:
                  type: string
                annotations:
                  type: object
                  required:
                    - bf2.org/id
                    - bf2.org/placementId
                  properties:
                    bf2.org/id:
                      type: string
                    bf2.org/placementId:
                      type: string
            spec:
              type: object
              properties:
                capacity:
                  $ref: '#/components/schemas/ManagedKafkaCapacity'
                oauth:
                  type: object
                  properties:
                    clientId:
                      type: string
                    clientSecret:
                      type: string
                    tokenEndpointURI:
                      type: string
                    jwksEndpointURI:
                      type: string
                    validIssuerEndpointURI:
                      type: string
                    userNameClaim:
                      type: string
                    tlsTrustedCertificate:
                      type: string
                    customClaimCheck:
                      type: string
                endpoint:
                  type: object
                  properties:
                    bootstrapServerHost:
                      type: string
                    tls:
                      type: object
                      properties:
                        cert:
                          type: string
                        key:
                          type: string
                versions:
                  $ref: '#/components/schemas/ManagedKafkaVersions'
                deleted:
                  type: boolean
              required:
                - deleted
    ManagedKafkaList:
      description: A list of ManagedKafka
      allOf:
        - $ref: '#/components/schemas/ListReference'
        - type: object
          example:
            kind: ManagedKafkaList
            items:
              $ref: '#/components/examples/ManagedKafkaExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ManagedKafka'
    ConnectorType:
      description: Represents a connector type supported by the API
      required:
        - name
        - version
        - json_schema
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            name:
              description: Name of the connector type.
              type: string
            version:
              description: Version of the connector type.
              type: string
            description:
              description: A description of the connector.
              type: string
            icon_href:
              description: URL to an icon of the connector.
              type: string
            labels:
              description: labels used to categorize the connector
              type: array
              items:
                type: string
                enum:
                  - sink
                  - source
            json_schema:
              description: >-
                A json schema that can be used to validate a connectors
                connector_spec field.
              type: object
    ConnectorTypeList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ConnectorType'
    WatchEvent:
      required:
        - type
      type: object
      properties:
        type:
          type: string
        error:
          nullable: true
          $ref: '#/components/schemas/Error'
        object:
          type: object
          nullable: true
    ConnectorList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Connector'
    Connector:
      description: >-
        A connector holds the configuration to connect a Kafka topic to another
        system.
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            metadata:
              type: object
              properties:
                kafka_id:
                  type: string
                owner:
                  type: string
                name:
                  type: string
                created_at:
                  format: date-time
                  type: string
                updated_at:
                  format: date-time
                  type: string
                resource_version:
                  type: integer
                  format: int64
            deployment_location:
              $ref: '#/components/schemas/ClusterTarget'
            connector_type_id:
              type: string
            connector_spec:
              type: object
            desired_state:
              type: string
            status:
              type: string
    ConnectorReifyRequest:
      description: ConnectorReifyRequest is used to create ConnectorDeploymentSpec objects
      type: object
      properties:
        connector_id:
          type: string
        resource_version:
          type: integer
          format: int64
        kafka_id:
          type: string
        cluster_id:
          type: string
        cluster_status:
          $ref: '#/components/schemas/ConnectorClusterStatus'
        connector_spec:
          type: object
    ConnectorDeployment:
      description: Holds the deployment configuration of a connector
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            metadata:
              type: object
              properties:
                created_at:
                  format: date-time
                  type: string
                updated_at:
                  format: date-time
                  type: string
                resource_version:
                  type: integer
                  format: int64
            spec:
              $ref: '#/components/schemas/ConnectorDeploymentSpec'
            status:
              $ref: '#/components/schemas/ConnectorDeploymentStatus'
    ConnectorDeploymentSpec:
      description: Holds the deployment specification of a connector
      type: object
      properties:
        connector_meta_image:
          type: string
        connector_type_annotations:
          type: object
          additionalProperties:
            type: string
        connector_id:
          type: string
        connector_resource_version:
          type: integer
          format: int64
        kafka_id:
          type: string
        connector_type_id:
          type: string
        connector_spec:
          type: object
        desired_state:
          type: string
    ConnectorDeploymentStatus:
      description: The status of connector deployment
      type: object
      properties:
        phase:
          type: string
        resource_version:
          type: integer
          format: int64
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/MetaV1Condition'
    ConnectorDeploymentList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ConnectorDeployment'
    ConnectorDeploymentWatchEvent:
      allOf:
        - $ref: '#/components/schemas/WatchEvent'
        - type: object
          properties:
            object:
              $ref: '#/components/schemas/ConnectorDeployment'
    ClusterTarget:
      discriminator:
        propertyName: kind
        mapping:
          addon: '#/components/schemas/AddonClusterTarget'
          cloud_provider: '#/components/schemas/CloudProviderClusterTarget'
      oneOf:
        - $ref: '#/components/schemas/AddonClusterTarget'
        - $ref: '#/components/schemas/CloudProviderClusterTarget'
    AddonClusterTarget:
      description: Targets workloads to an addon cluster
      type: object
      required:
        - kind
      properties:
        kind:
          type: string
        cluster_id:
          type: string
    CloudProviderClusterTarget:
      description: Targets workloads to a cloud provider
      type: object
      required:
        - kind
      properties:
        kind:
          type: string
        cloud_provider:
          type: string
        region:
          type: string
        multi_az:
          type: boolean
    AddonParameterList:
      description: A list of addon parameters
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/AddonParameter'
    AddonParameter:
      description: A addon parameter
      type: object
      properties:
        id:
          type: string
        value:
          type: string
    ConnectorCluster:
      description: Schema for the request to update a data plane cluster's status
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            metadata:
              type: object
              properties:
                owner:
                  type: string
                name:
                  type: string
                created_at:
                  format: date-time
                  type: string
                updated_at:
                  format: date-time
                  type: string
            status:
              type: string
    ConnectorClusterList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/ConnectorCluster'
    ConnectorClusterStatus:
      description: Schema for the request to update a data plane cluster's status
      type: object
      properties:
        phase:
          type: string
        version:
          type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/MetaV1Condition'
        operators:
          description: the list of installed operators
          type: array
          items:
            type: object
            properties:
              id:
                description: the id of the operator
                type: string
              version:
                description: the version of the operator
                type: string
              namespace:
                description: the namespace to which the operator has been installed
                type: string
              status:
                description: the status of the operator
                type: string
    DataPlaneClusterUpdateStatusRequest:
      description: Schema for the request to update a data plane cluster's status
      type: object
      properties:
        conditions:
          description: The cluster data plane conditions
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              reason:
                type: string
              message:
                type: string
              status:
                type: string
              lastTransitionTime:
                type: string
        total:
          type: object
          properties:
            ingressEgressThroughputPerSec:
              type: string
              nullable: true
            connections:
              type: integer
              nullable: true
            dataRetentionSize:
              type: string
              nullable: true
            partitions:
              type: integer
              nullable: true
        remaining:
          type: object
          properties:
            ingressEgressThroughputPerSec:
              type: string
              nullable: true
            connections:
              type: integer
              nullable: true
            dataRetentionSize:
              type: string
              nullable: true
            partitions:
              type: integer
              nullable: true
        nodeInfo:
          type: object
          properties:
            ceiling:
              type: integer
              nullable: true
            floor:
              type: integer
              nullable: true
            current:
              type: integer
              nullable: true
            currentWorkLoadMinimum:
              type: integer
              nullable: true
        resizeInfo:
          type: object
          properties:
            nodeDelta:
              type: integer
              nullable: true
            delta:
              type: object
              nullable: true
              properties:
                ingressEgressThroughputPerSec:
                  type: string
                  nullable: true
                connections:
                  type: integer
                  nullable: true
                dataRetentionSize:
                  type: string
                  nullable: true
                partitions:
                  type: integer
                  nullable: true
      example:
        $ref: '#/components/examples/DataPlaneClusterUpdateStatusRequestExample'
    DataPlaneKafkaStatus:
      description: Schema of the status object for a Kafka cluster
      type: object
      properties:
        conditions:
          description: The status conditions of a Kafka cluster
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              reason:
                type: string
              message:
                type: string
              status:
                type: string
              lastTransitionTime:
                type: string
        capacity:
          description: Capacity information of the data plane cluster
          type: object
          properties:
            ingressEgressThroughputPerSec:
              type: string
            totalMaxConnections:
              type: integer
            maxDataRetentionSize:
              type: string
            maxPartitions:
              type: integer
            maxDataRetentionPeriod:
              type: string
        versions:
          description: Version information related to a Kafka cluster
          type: object
          properties:
            kafka:
              type: string
            strimzi:
              type: string
    DataPlaneKafkaStatusUpdateRequest:
      description: >-
        Schema for the request to update the statuses of Kafka clusters from
        data plane
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DataPlaneKafkaStatus'
      example:
        $ref: '#/components/examples/DataPlaneKafkaUpdateStatusRequestExample'
    DataplaneClusterAgentConfig:
      description: Configuration for the data plane cluster agent
      type: object
      properties:
        spec:
          description: Data plane cluster agent spec
          type: object
          properties:
            observability:
              description: Observability configurations
              type: object
              properties:
                accessToken:
                  type: string
                channel:
                  type: string
                repository:
                  type: string
                tag:
                  type: string
  parameters:
    id:
      name: id
      description: The id of record
      schema:
        type: string
      in: path
      required: true
    duration:
      name: duration
      in: query
      description: The length of time in minutes over which to return the metrics.
      required: true
      schema:
        type: integer
        format: int64
        default: 5
        minimum: 1
        maximum: 4320
      examples:
        duration:
          value: 5
    interval:
      name: interval
      in: query
      description: The interval in seconds between data points.
      required: true
      schema:
        type: integer
        format: int64
        default: 30
        minimum: 1
        maximum: 10800
      examples:
        interval:
          value: 30
    filters:
      name: filters
      in: query
      description: >-
        List of metrics to fetch. Fetch all metrics when empty. List entries are
        kafka internal metric names.
      schema:
        type: array
        items:
          type: string
        default: []
    page:
      name: page
      in: query
      description: Page index
      required: false
      schema:
        type: string
      examples:
        page:
          value: '1'
    size:
      name: size
      in: query
      description: Number of items in each page
      required: false
      schema:
        type: string
      examples:
        size:
          value: '100'
    orderBy:
      description: >-
        Specifies the order by criteria. The syntax of this parameter is

        similar to the syntax of the _order by_ clause of an SQL statement.

        Each query can be ordered by any of the kafkaRequests fields.

        For example, in order to retrieve all kafkas ordered by their name:


        ```sql

        name asc

        ```


        Or in order to retrieve all kafkas ordered by their name _and_ created
        date:


        ```sql

        name asc, created_at asc

        ```


        If the parameter isn't provided, or if the value is empty, then

        the results will be ordered by name.
      explode: true
      examples:
        orderBy:
          value: name asc
      in: query
      name: orderBy
      required: false
      schema:
        type: string
      style: form
    search:
      description: >
        Search criteria.


        The syntax of this parameter is similar to the syntax of the _where_
        clause of an

        SQL statement. Allowed fields in the search are: cloud_provider, name,
        owner, region and status. Allowed comparators are `<>`, `=` or `LIKE`.

        Allowed joins are `AND` and `OR`, however there is a limit of max 10
        joins in the search query.


        Examples:


        To retrieve kafka request with name equal `my-kafka` and region equal
        `aws`, the value should be:


        ```

        name = my-kafka and cloud_provider = aws

        ```


        To retrieve kafka request with its name starting with `my`, the value
        should be:


        ```

        name like my%25

        ```


        If the parameter isn't provided, or if the value is empty, then all the
        kafkas

        that the user has permission to see will be returned.


        Note. If the query is invalid, an error will be returned
      explode: true
      name: search
      in: query
      required: false
      examples:
        search:
          value: name = my-kafka and cloud_provider = aws
      schema:
        type: string
      style: form
  examples:
    USRegionExample:
      value:
        region: us-east-1
        cloud_provider: aws
        name: serviceapitest
    EURegionExample:
      value:
        region: eu-west-1
        cloud_provider: aws
        name: serviceapitest
    KafkaRequestExample:
      value:
        id: 1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        kind: kafka
        href: /api/managed-services-api/v1/kafkas/1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        status: ready
        cloud_provider: aws
        multi_az: true
        region: us-east-1
        owner: api_kafka_service
        name: serviceapi
        bootstrapServerHost: >-
          serviceapi-1isy6rq3jki8q0otmjqfd3ocfrg.apps.mk-bttg0jn170hp.x5u8.s1.devshift.org
        created_at: '2020-10-05T12:51:24.053142Z'
        updated_at: '2020-10-05T12:56:36.362208Z'
        version: 2.6.0
    KafkaRequestFailedCreationStatusExample:
      value:
        id: 1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        kind: kafka
        href: /api/managed-services-api/v1/kafkas/1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        status: failed
        cloud_provider: aws
        multi_az: true
        region: us-east-1
        owner: api_kafka_service
        name: serviceapi
        bootstrapServerHost: >-
          serviceapi-1isy6rq3jki8q0otmjqfd3ocfrg.apps.mk-bttg0jn170hp.x5u8.s1.devshift.org
        created_at: '2020-10-05T12:51:24.053142Z'
        updated_at: '2020-10-05T12:56:36.362208Z'
        failed_reason: a reason the kafka request creation failed
    CloudProviderExample:
      value:
        kind: CloudProvider
        id: aws
        name: aws
        display_name: Amazon Web Services
        enabled: true
    CloudRegionExample:
      value:
        kind: CloudRegion
        id: us-east-1
        display_name: 'US East, N. Virginia'
        enabled: true
    ServiceAccountRequestExample:
      value:
        name: my-app-sa
        description: service account for my app
    ServiceAccountExample:
      value:
        id: '1'
        kind: ServiceAccount
        href: /api/managed-services-api/v1/serviceaccounts/1
        name: my-app-sa
        description: service account for my app
        clientID: SA-121212
        clientSecret: secret
        owner: test-user
        created_at: '2021-04-07T16:24:01+05:30'
    ServiceAccountByIdExample:
      value:
        id: '1'
        kind: ServiceAccount
        href: /api/managed-services-api/v1/serviceaccounts/1
        name: my-app-sa
        description: service account for my app
        clientID: SA-121212
        owner: test-user
        created_at: '2021-04-07T16:24:01+05:30'
    ServiceAccountListItemExample:
      value:
        id: '1'
        kind: ServiceAccountListItem
        href: /api/managed-services-api/v1/serviceaccounts/1
        name: my-app-sa
        description: service account for my app
        clientID: SA-121212
        owner: test-user
        created_at: '2021-04-07T16:24:01+05:30'
    MetricsRangeQueryExample:
      value:
        metric:
          __name__: kafka_server_brokertopicmetrics_bytes_in_total
          strimzi_io_cluster: kafka-service
          topic: __consumer_offsets
        values:
          - Timestamp: 1611670230000
            Value: 84154
          - Timestamp: 1611670260000
            Value: 85888
          - Timestamp: 1611670290000
            Value: 87622
    MetricsInstantQueryExample:
      value:
        metric:
          __name__: kafka_server_brokertopicmetrics_bytes_in_total
          strimzi_io_cluster: kafka-service
          topic: __consumer_offsets
        Timestamp: 1611670230000
        Value: 84154
    400DeletionExample:
      value:
        id: '103'
        kind: Error
        href: /api/managed-services-api/v1/errors/103
        code: MGD-SERV-API-103
        reason: 'Synchronous action is not supported, use async=true parameter'
        operation_id: 1iWIimqGcrDuL61aUxIZqBTqNRa
    400CreationExample:
      value:
        id: '103'
        kind: Error
        href: /api/managed-services-api/v1/errors/103
        code: MGD-SERV-API-103
        reason: 'Synchronous action is not supported, use async=true parameter'
        operation_id: 1iWIimqGcrDuL61aUxIZqBTqNRa
    400InvalidQueryExample:
      value:
        id: '203'
        kind: Error
        href: /api/managed-services-api/v1/errors/23
        code: MGD-SERV-API-23
        reason: >-
          Failed to parse search query: Unable to list kafka requests for
          api_kafka_service: MGD-SERV-API-23: Failed to parse search query:
          Unsupported column name for search: 'id'. Supported column names are:
          region, name, cloud_provider, name, status. Query invalid: id = 123
        operation_id: 1lWDGuybIrEnxrAem724gqkkiDv
    404Example:
      value:
        id: '404'
        kind: Error
        href: /api/managed-services-api/v1/errors/7
        code: MGD-SERV-API-7
        reason: The requested resource doesn't exist
    404DeleteExample:
      value:
        id: '7'
        kind: Error
        href: /api/managed-services-api/v1/errors/7
        code: MGD-SERV-API-7
        reason: KafkaResource with id='1iK3duVYIvv5YvLlyz1mGR3JyqN' not found
        operation_id: 1iYO7g2g6HTdUKUa2ksH82kQD3y
    401Example:
      value:
        id: '11'
        kind: Error
        href: /api/managed-services-api/v1/errors/11
        code: MGD-SERV-API-11
        reason: 'Unable to verify JWT token: Required authorization token not found'
        operation_id: 1iY3UhEhwmXBpWPfI2lNekpd4ZD
    403Example:
      value:
        id: '4'
        kind: Error
        href: /api/managed-services-api/v1/errors/4
        code: MGD-SERV-API-4
        reason: User 'foo-bar' is not authorized to access the service.
        operation_id: 1lY3UiEhznXBpWPfI2lNejpd4YC
    403MaxAllowedInstanceReachedExample:
      value:
        id: '5'
        kind: Error
        href: /api/managed-services-api/v1/errors/5
        code: MGD-SERV-API-5
        reason: User 'foo-bar' has reached a maximum number of 6 allowed instances.
        operation_id: 1lY3UiEkxnXBpVPeI2oNejd3XB
    409NameConflictExample:
      value:
        id: '36'
        kind: Error
        href: /api/managed-services-api/v1/errors/36
        code: MGD-SERV-API-36
        reason: Kafka cluster name is already used
        operation_id: 6kY0UiEkzkXCzWPeI2oYehd3ED
    500Example:
      value:
        id: '9'
        kind: Error
        href: /api/managed-services-api/v1/errors/9
        code: MGD-SERV-API-9
        reason: Unspecified error
        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW
    500DeleteExample:
      value:
        id: '9'
        kind: Error
        href: /api/managed-services-api/v1/errors/9
        code: MGD-SERV-API-9
        reason: >-
          error deleting syncset: OCM-EX-9: failed to delete syncset:
          ext-serviceapi-1ix03lndlmq0qfc7sita5sljv8e for cluster id:
          1g5d88q0lrcdv4g7alb7slfgnj3dhbsj%!(EXTRA *errors.Error=identifier is
          '404', code is 'CLUSTERS-MGMT-404' and operation identifier is
          '1g5or50viu07oealuehrkc26dgftj1ac': Cluster
          '1g5d88q0lrcdv4g7alb7slfgnj3dhbsj' not found)
        operation_id: 1iYTsWry6nsqb2sNmFj5bXpD7Ca
    ManagedKafkaExample:
      value: {}
    DataPlaneClusterUpdateStatusRequestExample:
      value: {}
    DataPlaneKafkaUpdateStatusRequestExample:
      value:
        1iSY6RQ3JKI8Q0OTmjQFd3ocFRg:
          conditions:
            - type: Ready
              reason: KafkaInstanceReady
              message: installing
              status: 'False'
              lastTransitionTime: '2018-01-01T00:00:00Z'
          capacity:
            ingressEgressThroughputPerSec: 4Mi
            totalMaxConnections: 500
            maxDataRetentionSize: 100Gi
            maxPartitions: 100
            maxDataRetentionPeriod: P14D
          versions:
            kafka: 2.4.1
            strimzi: 0.21.2
    400InvalidIdExample:
      value:
        id: '203'
        kind: Error
        href: /api/managed-services-api/v1/errors/21
        code: MGD-SERV-API-21
        reason: Bad request
        operation_id: 1lWDGuybIrEnxrAem724gqkkiDv
  securitySchemes:
    Bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
